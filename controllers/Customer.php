<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Customer extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Customer_model');
    } 

    /*
     * Listing of customer
     */
    function index()
    {
        $data['customer'] = $this->Customer_model->get_all_customer();
        
        $data['_view'] = 'customer/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new customer
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('customer_name','Customer Name','required');
		$this->form_validation->set_rules('customer_phone','Customer Phone','required');
		$this->form_validation->set_rules('customer_address','Customer Address','required');
		
		if($this->form_validation->run())     
        {   
	$userdata=$this->session->userdata();	
            $params = array(
				'customer_name' => $this->input->post('customer_name'),
				'company_name' => $this->input->post('company_name'),
				'customer_phone' => $this->input->post('customer_phone'),
				'customer_address' => $this->input->post('customer_address'),
				'customer_email' => $this->input->post('customer_email'),
				'sales_person_id' => $this->input->post('sales_person_id'),
				'created_by' => $userdata['userdata']->userid,
				'created_date' => date("Y-m-d h:i:s"),
				'currentbalance' => 0,
            );
            
            $customer_id = $this->Customer_model->add_customer($params);
            redirect('customer/index');
        }
        else
        {            
            $data['_view'] = 'customer/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a customer
     */
    function edit($customer_id)
    {   
        // check if the customer exists before trying to edit it
        $data['customer'] = $this->Customer_model->get_customer($customer_id);
        
        if(isset($data['customer']['customer_id']))
        {
            $this->load->library('form_validation'); 

			$this->form_validation->set_rules('customer_name','Customer Name','required');
			$this->form_validation->set_rules('customer_phone','Customer Phone','required');
			$this->form_validation->set_rules('customer_address','Customer Address','required');
		
			if($this->form_validation->run())     
            {   
				$userdata=$this->session->userdata();
                $params = array(
					'customer_name' => $this->input->post('customer_name'),
					'company_name' => $this->input->post('company_name'),
					'customer_phone' => $this->input->post('customer_phone'),
					'customer_address' => $this->input->post('customer_address'),
					'customer_email' => $this->input->post('customer_email'),
					'sales_person_id' => $this->input->post('sales_person_id'),
					
                );

                $this->Customer_model->update_customer($customer_id,$params);            
                redirect('customer/index');
            }
            else
            {
                $data['_view'] = 'customer/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The customer you are trying to edit does not exist.');
    } 

    /*
     * Deleting customer
     */
    function remove($customer_id)
    {
        $customer = $this->Customer_model->get_customer($customer_id);

        // check if the customer exists before trying to delete it
        if(isset($customer['customer_id']))
        {
            $this->Customer_model->delete_customer($customer_id);
            redirect('customer/index');
        }
        else
            show_error('The customer you are trying to delete does not exist.');
    }
    
}
